import math as mt
import numpy as np


## testing 1
class dhparams:
    def __init__(self, offset, length, twist, joint):
        print("DH parameters initialised; offsets:",offset, "lengths: ", length, "twists: " , twist, "joints: ", joint)
        self.d = offset
        self.a = length
        self.alpha = twist
        self.theta = joint


def transmat(offset, length, twist, joint, jointangle):
    t = np.empty([jointangle.size, 4, 4])
    t[:, 0, 0] = np.cos(jointangle)*np.cos(joint) - np.sin(jointangle)*np.sin(joint)*np.cos(twist)
    t[:, 1, 0] = -np.sin(jointangle)*np.cos(joint) - np.cos(jointangle)*np.sin(joint)*np.cos(twist)
    t[:, 2, 0] = np.sin(joint)*np.sin(alpha)
    t[:, 3, 0] = length*np.cos(joint)
    t[:, 0, 1] = np.cos(jointangle) * np.sin(joint) + np.sin(jointangle) * np.cos(joint) * np.cos(twist)
    t[:, 1, 1] = -np.sin(jointangle) * np.sin(joint) + np.cos(jointangle) * np.cos(joint) * np.cos(twist)
    t[:, 2, 1] = -np.cos(joint) * np.sin(twist)
    t[:, 3, 1] = length * np.cos(joint)
    t[:, 0, 2] = np.sin(jointangle)*np.sin(twist)
    t[:, 1, 2] = np.cos(jointangle)*np.sin(twist)
    t[:, 2, 2] = np.cos(twist)
    t[:, 3, 2] = offset
    t[:, 0, 3] = np.zeros([1, jointangle.size])
    t[:, 1, 3] = np.zeros([1, jointangle.size])
    t[:, 2, 3] = np.zeros([1, jointangle.size])
    t[:, 3, 3] = np.ones(jointangle.size)
    return t


d = np.array([0.0, 0.2784, 0.0, 0.0, 0.2906, 0.0, 0.0])
a = np.array([0.0, 0.056, 0.205, -0.056, 0.0, -0.065, 0.1046])
alpha = np.array([0.0, mt.pi/2, 0.0, -mt.pi/2, mt.pi/2, -mt.pi/2, 0.0])
theta = np.array([0.0, 0.0, mt.pi/2, -mt.pi/2, 0.0, 0.0, 0.0])


jointangles = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])

DH = dhparams(d, a, alpha, theta)


T = transmat(DH.d, DH.a, DH.alpha, DH.theta, jointangles)
